plugins {
    id 'com.github.johnrengelman.shadow'
}

repositories {
    maven { url "https://maven.shedaniel.me/" }
}

loom {
    accessWidenerPath.set(project(":common").loom.accessWidenerPath)
    forge {
        mixinConfig "just_like_rays.mixins.json"
        mixinConfig "just_like_rays.forge.client.mixins.json"

        convertAccessWideners.set(true)
        extraAccessWideners.add(loom.accessWidenerPath.get().asFile.name)
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    //modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    modApi "me.shedaniel.cloth:cloth-config-forge:$cloth_config_version"

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:$mixin_extras_version"))
    implementation(include("io.github.llamalad7:mixinextras-forge:$mixin_extras_version"))

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
